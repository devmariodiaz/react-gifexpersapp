{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/helpers/getGif.js","components/GifGrid.js","components/hooks/useFetchGif.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","alt","src","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,QCL/CG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,oDAAf,UACI,qBAAKC,IAAMH,EAAQI,IAAMH,IACzB,4BAAKD,Q,uBCNJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,sDCKPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAMtB,ECRuB,SAACA,GACvB,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAU,WACPjB,EAAQC,GACPiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGjB,CAACb,IAUGc,EDhB0BK,CAAYnB,GAAhCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAgBtB,OACI,gCAEI,6BAAMb,IAEJa,GAAW,mBAAGjB,UAAU,mCAAb,wBAEb,6BACI,qBAAKA,UAAU,YAAf,SAGIc,EAAOF,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADCA,EAAIhB,eEpCzB2B,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ2C,EAAWb,KAAI,SAAAR,GACX,OAAO,cAAC,EAAD,CACHA,SAAWA,GACLA,YCdnBsB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.07d56189.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => setInputValue(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2)\n        {\n            setCategories(cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n// export default AddCategory;","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className=\"card animate__animated animate__lightSpeedInRight\">\n            <img alt={ title } src={ url } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","export const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=m3Vjrzv96uAAoBHvM76CO5tkDj8KyBpL`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React, { useEffect, useState } from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { getGifs } from './helpers/getGif';\nimport { useFetchGif } from './hooks/useFetchGif';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [counter, setCounter] = useState(0);\n\n    // const [images, setImages] = useState([]);\n\n    const { data: images, loading } = useFetchGif(category);\n    \n    // useEffect(() => {\n    //     getGifs();\n    // }, []);\n\n    // useEffect(() => {\n    //     getGifs(category)\n    //     .then(imgs => setImages(imgs));\n    // }, []);\n\n    // useEffect(() => {\n    //     getGifs(category)\n    //     .then( setImages );\n    // }, [ category ]);\n\n    return (\n        <div>\n\n            <h3>{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n            <ol>\n                <div className=\"card-grid\">\n\n                {\n                    images.map((img) => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img } />\n\n                        // <li key={ id }>\n                        //     { title}\n                        // </li>\n                    ))\n                    // images.map(img => (\n                    //     <li key={ img.id }>\n                    //         { img.title}\n                    //     </li>\n                    // ))\n                }\n                </div>\n                \n            </ol>\n            {/* <h3>{ counter }</h3>\n            <button onClick={ () => setCounter(counter + 1) } ></button> */}\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGif';\n\nexport const useFetchGif = (category) => {\n     const [state, setState] = useState({\n         data: [],\n         loading: true\n     });\n\n     useEffect(() => {\n        getGifs(category)\n        .then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        })\n     }, [category])\n     \n\n// setTimeout(() => {\n//     setstate( {\n//         data: [1,2,3,4,5,6,7,8],\n//         loading: false\n//     })\n// }, 3000)\n\n     return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    // const categories = ['One punch', 'Samurai X', 'Dragon Ball']\n\n    const [categories, setCategories] = useState(['One punch']);\n\n    // const handlerAdd = () => {\n    //     // setCategories([...categories, 'HunterXHunter']);\n    //     setCategories(cats => [...cats, 'HunterXHunter']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n        \n            {/* <button onClick={ handlerAdd }>Agregar</button> */}\n            <ol>\n                {\n                    categories.map(category => {\n                        return <GifGrid \n                            category={ category } \n                            key={ category }\n                        />\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}